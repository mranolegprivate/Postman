{
	"info": {
		"_postman_id": "3dc202a7-ec9a-49c4-b8d4-437a6a7de5d2",
		"name": "group_34_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22920825",
		"_collection_link": "https://www.postman.com/mranolegprivate-team/workspace/postman-hw/collection/22920825-3dc202a7-ec9a-49c4-b8d4-437a6a7de5d2?action=share&creator=22920825&source=collection_link"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('This is the first responce from server!ss');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var resdata = pm.response.json();\r",
							" // 4. Спарсить request.\r",
							" var reqdata = pm.request.url.query.toObject();\r",
							"\r",
							" var resNameJson = resdata.name;\r",
							" var reqNameJson = reqdata.name;\r",
							"\r",
							" console.log(typeof resNameJson)\r",
							" console.log(typeof reqNameJson)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"EqlReSandReqName\", function () {\r",
							"    pm.expect(resNameJson).to.eql(reqNameJson);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resAgejson = +resdata.age;\r",
							"var reqAgejson = +reqdata.age;\r",
							"\r",
							"pm.test(\"EqlReSandReqAge\",function (){\r",
							"    pm.expect(resAgejson).to.eql(reqAgejson);\r",
							"})\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resSaljson = resdata.salary;\r",
							"var reqSaljson = +reqdata.salary;\r",
							"\r",
							"console.log(typeof reqSaljson)\r",
							"\r",
							"pm.test(\"EqlReSandReqSal\",function (){\r",
							"    pm.expect(resSaljson).to.eql(reqSaljson)\r",
							"})\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var famResjson = resdata.family;\r",
							"var famPetResjson = famResjson.pets.dog;\r",
							"console.log(famResjson)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"EqlPetName\", function (){\r",
							"    pm.expect(famPetResjson).to.have.property('name');\r",
							"})\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"EqlPetAge\", function (){\r",
							"    pm.expect(famPetResjson).to.have.property('age');\r",
							"})\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"EqlPetResName\", function (){\r",
							"    pm.expect(famPetResjson.name).to.eql('Luky');\r",
							"})\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"EqlPetResAge\", function (){\r",
							"    pm.expect(famPetResjson.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=AnOleg&age=35&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "AnOleg"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var reqdata = pm.request.url.query.toObject();\r",
							"// 4. Спарсить request.\r",
							"var resdata = pm.response.json();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var reqNamejson = reqdata.name;\r",
							"var resNamejson = resdata.name;\r",
							"\r",
							"console.log(reqNamejson)\r",
							"console.log(resNamejson)\r",
							"\r",
							"pm.test(\"EqlNameReSandReq\", function(){\r",
							"    pm.expect(resNamejson).to.eql(reqNamejson);\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var reqAgejson = +reqdata.age;\r",
							"var resAgejson = resdata.age;\r",
							"\r",
							"pm.test(\"EqlAgeReSandReq\", function(){\r",
							"    pm.expect(resAgejson).to.eql(reqAgejson);\r",
							"})\r",
							"\r",
							"var reqSaljson = +reqdata.salary;\r",
							"var resSaljson = resdata.salary;\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqSaljson)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resSaljson)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(+resSaljson[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(+resSaljson[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(+resSaljson[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"EqlResSal[0]andReqSal\", function(){\r",
							"    pm.expect(resSaljson[0]).to.eql(reqSaljson)\r",
							"})\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"EqlResSal[1]andReqSal\", function(){\r",
							"    var multReqSaljson = reqSaljson * 2;\r",
							"    pm.expect(+resSaljson[1]).to.eql(multReqSaljson);\r",
							"} )\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"EqlResSal[2]andReqSal\", function(){\r",
							"    var multReqSaljson = reqSaljson * 3;\r",
							"    pm.expect(+resSaljson[2]).to.eql(multReqSaljson);\r",
							"} )\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"name\",resNamejson);\r",
							"pm.environment.set(\"age\",resAgejson);\r",
							"pm.environment.set(\"salary\", resSaljson[0]);\r",
							"\r",
							"//  Мой вариант на шаги 15-20\r",
							"var key = \"name\"\r",
							"var value = pm.response.json().name\r",
							"pm.collectionVariables.set(key, value);\r",
							"var key = \"age\"\r",
							"var value = pm.response.json().age\r",
							"pm.collectionVariables.set(key, value);\r",
							"var key = \"salary\"\r",
							"var value = pm.response.json().salary[0]\r",
							"pm.collectionVariables.set(key, value);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(var i = 0; i<3;i++ ){\r",
							"    console.log(+resSaljson[i]);\r",
							" }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=AnOleg&age=35&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "AnOleg"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var resJsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var reqJsonData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"ChekStQaSal\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('start_qa_salary')\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"ChekJun+QaSal\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"ChekMidQaSal\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"ChekMid+QaSal\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"ChekSinQaSal\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"ChekKeyPerson\", function(){\r",
							"    pm.expect(resJsonData).to.have.property('person')\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"EqlStQaSaLandSal\", function(){\r",
							"    pm.expect(resJsonData.start_qa_salary).to.eql(+reqJsonData.salary)\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"EqlJunQaSaLandSal\", function(){\r",
							"    var multireqjsonjunSal = (+reqJsonData.salary)*2;\r",
							"    pm.expect(resJsonData.qa_salary_after_6_months).to.eql(multireqjsonjunSal)\r",
							"})\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"EqlMidQaSaLandSal\", function(){\r",
							"     var multireqjsonMidSal = (+reqJsonData.salary)*2.7;\r",
							"    pm.expect(resJsonData.qa_salary_after_12_months).to.eql(multireqjsonMidSal)\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"EqlMid+QaSaLandSal\", function(){\r",
							"     var multireqjsonMidPlSal = (+reqJsonData.salary)*3.3;\r",
							"    pm.expect(resJsonData['qa_salary_after_1.5_year']).to.eql(multireqjsonMidPlSal)\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"EqlSinQaSaLandSal\", function(){\r",
							"    var multireqjsonSinSal = (+reqJsonData.salary)*3.8;\r",
							"    pm.expect(resJsonData['qa_salary_after_3.5_years']).to.eql(multireqjsonSinSal)\r",
							"})\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"EqlPersoUnameAndReq\", function(){\r",
							"    pm.expect(resJsonData.person.u_name[0]).to.eql(reqJsonData.name)\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"EqlResonAgeAndReq\",function(){\r",
							"    pm.expect(resJsonData.person.u_age).to.eql(+reqJsonData.age);\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"EqlPersonSal5YersAndSalMulti\",function(){\r",
							"    var multireqjsonLider = (+reqJsonData.salary)*4.2;\r",
							"    pm.expect(resJsonData.person.u_salary_5_years).to.eql(multireqjsonLider);\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = (Object.keys(resJsonData.person));\r",
							"\r",
							"for(var i = 0; i < 3; i++){\r",
							"    console.log(person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							" var jsonData = pm.response.json(); \r",
							"// 7. Спарсить request.\r",
							" var reqdata = request.data;\r",
							"\r",
							" var res_json = jsonData.name;\r",
							" var req_json = reqdata.name;\r",
							"\r",
							" console.log(res_json)\r",
							" console.log(req_json)\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"EqlNameResReqhard\", function () {\r",
							"pm.expect(res_json).to.eql(\"AnOleg\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							" var respAgeJson = +jsonData.age;\r",
							" var reqAgejson = +reqdata.age;\r",
							"\r",
							" console.log(typeof respAgeJson)\r",
							" console.log(typeof reqAgejson)\r",
							"\r",
							"pm.test(\"EqlAgeResReqhard\", function () {\r",
							"    pm.expect(respAgeJson).to.eql(35);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							" var resSaljson = jsonData.salary;\r",
							" var reqSaljson = +reqdata.salary;\r",
							"\r",
							" console.log(typeof resSaljson)\r",
							" console.log(typeof reqSaljson)\r",
							"\r",
							"\r",
							"pm.test(\"EqlSalaryResReqhard\", function () {\r",
							"    pm.expect(resSaljson).to.eql(5000);\r",
							"});\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"EqlNameResReq\", function () {\r",
							"    pm.expect(res_json).to.eql(req_json);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"EqlAgeResReq\", function () {\r",
							"    pm.expect(respAgeJson).to.eql(reqAgejson);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"EqlSalaryResReq\", function () {\r",
							"    pm.expect(resSaljson).to.eql(reqSaljson);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var familyJson = jsonData.family;\r",
							"console.log(familyJson)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"EqlSalaryRes_ReqMylti4\", function () {\r",
							"    var familyResJson = familyJson.u_salary_1_5_year;\r",
							"    var multiSalreq = reqSaljson * 4;\r",
							"    pm.expect(familyResJson).to.eql(multiSalreq);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72:5005",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}